server:
  port: 8080 # 게이트웨이는 8080 포트에서 실행됩니다.
  netty:
    connection-timeout: 30s
    max-connections: 2000
  reactor:
    netty:
      pool:
        max-connections: 2000
        max-idle-time: 30s


spring:
  profiles:
    include: secret
  application:
    name: api-gateway
  cloud:
    gateway:
      httpclient:
        max-header-size: 16KB
        max-initial-line-length: 4KB
        pool:
          max-connections: 2000
          acquire-timeout: 30000
      server:
        webflux:
          routes:
            # OpenAPI docs routes
            - id: auth-api-docs
              uri: http://localhost:9001
              predicates:
                - Path=/v3/api-docs/auth
              filters:
                - RewritePath=/v3/api-docs/auth, /v3/api-docs
            - id: event-api-docs
              uri: http://localhost:9000
              predicates:
                - Path=/v3/api-docs/event
              filters:
                - RewritePath=/v3/api-docs/event, /v3/api-docs/event
            - id: purchase-api-docs
              uri: http://localhost:9000
              predicates:
                - Path=/v3/api-docs/purchase
              filters:
                - RewritePath=/v3/api-docs/purchase, /v3/api-docs/purchase
            - id: user-api-docs
              uri: http://localhost:9000
              predicates:
                - Path=/v3/api-docs/user
              filters:
                - RewritePath=/v3/api-docs/user, /v3/api-docs/user
            - id: seat-api-docs
              uri: http://localhost:9000
              predicates:
                - Path=/v3/api-docs/seat
              filters:
                - RewritePath=/v3/api-docs/seat, /v3/api-docs/seat
            - id: broker-api-docs
              uri: lb://broker-service
              predicates:
                - Path=/v3/api-docs/broker
              filters:
                - RewritePath=/v3/api-docs/broker, /v3/api-docs
            # API routes
            - id: auth-service
              uri: http://localhost:9001 # event 모듈이 실행될 주소
              predicates:
                - Path=/api/v1/auth/**
            - id: broker-service
              uri: lb://broker-service
              predicates:
                - Path=/api/v1/broker/**
            - id: static-event-service
              uri: http://localhost:9000
              predicates:
                - Path=/static/events/**
            - id: static-service
              uri: http://localhost:9000
              predicates:
                - Path=/static/**
            - id: main-service # 규칙의 고유 ID
              uri: http://localhost:9000 # user 모듈이 실행될 주소
              predicates:
                - Path=/api/v1/** # 이 경로 패턴의 요청이 오면 위 uri로 전달합니다.
          default-filters: AuthorizationFilter

  data:
    redis:
      host: localhost
      port: 6379

springdoc:
  swagger-ui:
    urls:
      - name: auth
        url: /v3/api-docs/auth
        display-name: "Auth Service"
      - name: event
        url: /v3/api-docs/event
        display-name: "Event Service"
      - name: purchase
        url: /v3/api-docs/purchase
        display-name: "Purchase Service"
      - name: user
        url: /v3/api-docs/user
        display-name: "User Service"
      - name: seat
        url: /v3/api-docs/seat
        display-name: "Seat Service"
      - name: broker
        url: /v3/api-docs/broker
        display-name: "Broker Service"
    path: /swagger-ui.html
filter:
  whitelist:
    # method must be uppercase
    urls:
      - method: POST
        url: "/api/v1/auth/register"
      - method: POST
        url: "/api/v1/auth/login"
      - method: "*"
        url: "/api/v1/auth/social/**"
      - method: POST
        url: "/api/v1/events/list"
      - method: GET
        url: "/api/v1/events/{id}"
      - method: PUT
        url: "/static/**"
      - method: GET
        url: "/static/**"
      - method: "*"
        url: "/static/events/images/**"
      - method: GET
        url: "/swagger-ui/**"
      - method: GET
        url: "/swagger-ui.html"
      - method: GET
        url: "/v3/api-docs/**"
      - method: GET
        url: "/webjars/**"

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  prometheus:
    metrics:
      export:
        enabled: true
logging:
  level:
    org.codenbug: DEBUG
    org.springframework.cloud.gateway: DEBUG
    org.springframework.web: DEBUG
    reactor.netty.resources: INFO
    org.springframework.scheduling: INFO
    org.springframework.cloud.gateway.filter: DEBUG
    org.springframework.cloud.gateway.handler.predicate: DEBUG
